snippet f "string interpolation" w
f'$0'
endsnippet

snippet \clearlineafter "" i
\033[0K
endsnippet
snippet \clearlinebefore "" i
\033[1K
endsnippet
snippet \clearline "" i
\033[2K
endsnippet
snippet \reset "" i
\033[0m
endsnippet
snippet \cursorhome "" i
\033[H
endsnippet
snippet \cursorup "" i
\033[$1A$0
endsnippet
snippet \cursordown "" i
\033[$1B$0
endsnippet
snippet \cursorleft "" i
\033[$1D$0
endsnippet
snippet \cursoright "" i
\033[$1C$0
endsnippet
snippet \cursorsave "" i
\033[s
endsnippet
snippet \cursorrestore "" i
\033[u
endsnippet
snippet \bright "" i
\033[1m
endsnippet
snippet \dim "" i
\033[2m
endsnippet
snippet \blink "" i
\033[5m
endsnippet
snippet \fgred "" i
\033[31m
endsnippet
snippet \fggreen "" i
\033[32m
endsnippet
snippet \fgmagenta "" i
\033[35m
endsnippet
snippet \fgdef "" i
\033[39m
endsnippet

snippet 3" "triple quoted string (double quotes)" b
"""
${1:${VISUAL}}
"""
endsnippet

snippet 3' "triple quoted string (single quotes)" b
'''
${1:${VISUAL}}
'''
endsnippet

# Arg parser
snippet argument "argparser argument"
parser.add_argument( '-${1}', '--${2}'$0 )
endsnippet

snippet boolarg "argparser argument"
parser.add_argument( '-${1}', '--${2}', action='store_true'$0 )
endsnippet

snippet argoutput "argparser output argument"
parser.add_argument( '-o', '--output'$0 )
endsnippet

snippet parser "create parser"
from argparse import ArgumentParser
parser = ArgumentParser()
parser.add_argument( '-${1}', '--${2}'$0 )
endsnippet

snippet tryembed "Embed IPython in case of exception"
try:
	$0${VISUAL}
except:
	import IPython
	IPython.embed(header='Embed on exception', colors='neutral')
endsnippet

snippet embed "Embed IPython here"
import IPython; IPython.embed(colors='neutral')
endsnippet

snippet Embed "Embed IPython here"
import IPython; IPython.embed(header='$0', colors='neutral')
endsnippet

snippet pdb "Start PDB debugger"
import pdb; pdb.set_trace()
endsnippet

snippet main "basic program"
#!/usr/bin/env python

def main(args):
    ${0:pass}

if __name__ == '__main__':
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument('input')

    main(parser.parse_args())
endsnippet

snippet Figure "matplotlib figure"
${1:fig} = ${2:plt}.figure()
${3:ax} = $2.subplot(${4:111}, xlabel='${5}', ylabel='${6}', title='${7}')
$3.minorticks_on()
$3.grid()

$0
endsnippet

snippet figure "matplotlib figure"
plt.figure()
${1:ax} = plt.subplot(${2:111}, xlabel='${3}', ylabel='${4}', title='${5}')
$0
endsnippet

#
# Properties
#
snippet roprop "read only property"
@property
def ${1:name}(self):
    return self._$1
endsnippet

snippet rwprop "read/write property"
@property
def ${1:name}(self):
    return self._$1

@$1.setter
def $1(self, $1):
    self._$1 = $1
endsnippet
