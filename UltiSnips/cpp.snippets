clearsnippets cl

snippet "runtime(_error)?" "throw runtime error" r
throw std::runtime_error("$0");
endsnippet

snippet "cl(ass)?" "class .. (class)" !r
class ${1:`!p snip.rv = snip.basename or "name"`}${2: : public ${3:TNamed}}${4}
{
public:
	${1/(\w+).*/$1/}(${5});
	virtual ~${1/(\w+).*/$1/}();

private:
	${0:/* data */}
};
endsnippet

snippet template "Template wrap"
${2:name}<${1:${VISUAL}}>$0
endsnippet

snippet for "for( auto )" !
for(auto${2} ${1:var}: ${3:iterable}){
    ${4:$1->}$0
}
endsnippet

snippet method "Class method definition" !b
${3:void} ${4:`!p snip.rv = snip.basename or "class"`}::${1:`!p snip.rv = snip.basename or "method"`}(${2}){
    ${0:/* code */}
}
endsnippet

snippet ro-prop "Get method"
${1:double} get_${2:variable}()      { return ${4:m_}$2; }
endsnippet

snippet rw-prop "Get and set methods"
${1:double} get_${2:variable}() { return ${4:m_}$2; }
void set_$2($1 ${3:value}) { $4$2 = $3; }
endsnippet

snippet roprop "Get method"
${1:double} get${2:Variable}() { return ${4:m_}$2; }
endsnippet

snippet rwprop "Get and set methods"
${1:double} get${2:Variable}() { return ${4:m_}$2; }
void set$2($1 ${3:value}) { $4$2 = $3; }
endsnippet

snippet rop"Get method"
${1:double} ${2:Variable}() { return ${4:m_}$2; }
endsnippet

snippet rwp"Get and set methods"
${1:double} ${2:Variable}() { return ${4:m_}$2; }
void $2($1 ${3:value}) { $4$2 = $3; }
endsnippet

snippet Roprop "Get and set methods"
${1:double} Get${2:Variable}() { return ${4:m_}$2; }
endsnippet

snippet Rwprop "Get and set methods"
${1:double} Get${2:Variable}() { return ${4:m_}$2; }
void Set$2($1 ${3:value}) { $4$2 = $3; }
endsnippet


snippet "constr(uctor)?" "Class constructor/destructor definition" br
${2:`!p snip.rv = snip.basename or "class"`}::${3}$2(${1})${4}{
    ${0:/* code */}
}
endsnippet

snippet cldef "ROOT: ClassDef" 
ClassDef( ${1:`!p snip.rv = snip.basename or "name"`}, ${2:1} );$0
endsnippet

snippet Streamer "ROOT: Streamer implementation" b
void ${1:`!p snip.rv = snip.basename or "name"`}::Streamer( TBuffer &R__b ){
    if ( R__b.IsReading() ) {
        $1::Class()->ReadBuffer(R__b, this);$0
    } else {
        $1::Class()->WriteBuffer(R__b, this);
    }
}
endsnippet

snippet /** "Doxygen comment for the method or function"
/**
 * @brief ${1}
 *
 * ${2}
 *
 * @param ${3}
 * @return ${4}
 */
endsnippet

snippet /**c "Doxygen comment for the class"
/**
 * @brief ${1}
 *
 * ${2}
 *
 * @author ${3:Maxim Gonchar}
 * @date ${4}
 */
endsnippet

snippet \clearlineafter "" i
\033[0K
endsnippet
snippet \clearlinebefore "" i
\033[1K
endsnippet
snippet \clearline "" i
\033[2K
endsnippet
snippet \reset "" i
\033[0m
endsnippet
snippet \cursorhome "" i
\033[H
endsnippet
snippet \cursorup "" i
\033[$1A$0
endsnippet
snippet \cursordown "" i
\033[$1B$0
endsnippet
snippet \cursorleft "" i
\033[$1D$0
endsnippet
snippet \cursoright "" i
\033[$1C$0
endsnippet
snippet \cursorsave "" i
\033[s
endsnippet
snippet \cursorrestore "" i
\033[u
endsnippet
snippet \bright "" i
\033[1m
endsnippet
snippet \dim "" i
\033[2m
endsnippet
snippet \blink "" i
\033[5m
endsnippet
snippet \fgred "" i
\033[31m
endsnippet
snippet \fggreen "" i
\033[32m
endsnippet
snippet \fgmagenta "" i
\033[35m
endsnippet
snippet \fgdef "" i
\033[39m
endsnippet
